[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://bhk0j5mel7c7q"]

[sub_resource type="Shader" id="Shader_0r6uh"]
code = "shader_type canvas_item;

uniform vec4 light_color: source_color;
uniform vec4 dark_color: source_color;

uniform bool is_inverted;

// normalized bayer matrix (threshold map)
const mat4 BAYER_4x4 = mat4(vec4(0, 12, 3, 15), vec4(8, 4, 11, 7), vec4(2, 14, 1, 13), vec4(10, 6, 9, 5)) * mat4(0.0625);
const float matrix_size = 4.0;

float rand(vec2 uv) {
    return fract(sin(dot(uv, vec2(12.9898,78.233))) * 43758.5453123);
}

void fragment() {
	COLOR = texture(TEXTURE, UV);

	// sRGB to RGB i guess...
	vec3 linear_to_RGB = pow(COLOR.rgb, vec3(2.2));
    COLOR.rgb = linear_to_RGB;

    // LUMA coefficients
	float gray = dot(COLOR.rgb, vec3(0.299, 0.587, 0.114));
	COLOR.rgb = vec3(gray);
	
	vec2 bayer = mod(vec2(FRAGCOORD.xy), vec2(matrix_size));
	vec3 new_color;
	
	if (is_inverted) {
		new_color = step(1.0 - BAYER_4x4[int(bayer.x)][int(bayer.y)], vec3(gray));
	} else {
		new_color = step(BAYER_4x4[int(bayer.x)][int(bayer.y)], vec3(gray));
	}

	COLOR.rgb = (new_color == vec3(1.0)) ? light_color.rgb : dark_color.rgb;
}"

[resource]
shader = SubResource("Shader_0r6uh")
shader_parameter/light_color = Color(1, 1, 1, 1)
shader_parameter/dark_color = null
shader_parameter/is_inverted = false
